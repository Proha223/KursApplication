Инициализаторы объектов позволяют присваивать значения всем доступным извне полям и свойствам объекта в момент его создания без явного вызова конструктора. Чтобы продемонстрировать использование инициализаторов объектов, изменим наш класс следующим образом: во-первых, все поля класса сделаем доступными извне — добавим им модификатор public и, во-вторых, напишем ещё один конструктор:

==========================================

class Building
{
    public double width;
    public double length;
    public double height;

    public Building(): this(20, 20, 3)
    { 
    
    }

==========================================

Второй конструктор также использует ключевое слово this, то есть, при вот таком создании объекта:

==========================================
Building building = new Building();
==========================================

будет вызван наш первый конструктор с параметрами 20, 20, 3.  Теперь посмотрим, как мы можем воспользоваться инициализатором объекта:

==========================================
Building building = new Building { width = 40, length = 30, height = 5 };
==========================================
Здесь мы в фигурных скобках указали значение всем публичным полям класса и без явного вызова конструктора создали объект. При этом следует учитывать следующие особенности инициализатора объектов:

1. используя инициализатор мы можем установить значения только доступных из внешнего кода полей и свойств объекта. Именно поэтому мы добавили к нашим полям модификатор public.
2. несмотря на то, что явного вызова конструктора не было, конструктор вызывается (в нашем примере был вызван второй конструктор — без параметров) и только после вызова конструктора выполняется инициализатор. Таким образом, мы перезаписали поля нашего объекта в инициализаторе.

Проверить второй пункт достаточно просто — создадим снова два объекта зданий: один — с конструктором, второй — с инициализатором и посмотрим на вывод консоли:

==========================================
//создаем объект с параметрами width = 20, length = 20, height = 3 и используем инициализатор
Building building = new Building { width = 40, length = 30, height = 5 };
//создаем объект с параметрами width = 20, length = 20, height = 3
Building building2 = new Building();
Console.WriteLine($"Объем первого здания: {building.GetVolume()}");
Console.WriteLine($"Объем второго здания: {building2.GetVolume()}");
==========================================

Вывод консоли:

Объем первого здания: 6000
Объем второго здания: 1200

Как видите, инициализатор объекта перезаписал значение полей и в консоли мы увидели значение 6000