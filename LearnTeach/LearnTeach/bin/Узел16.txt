Для класса в C# можно создать любое количество своих конструкторов. Например, создадим такой конструктор для нашего класса:

==========================================
class Building
{
    double width;
    double length;
    double height;

    //Конструктор
    public Building(double width, double length, double height)
    {
        this.width = width;
        this.length = length;
        this.height = height;
    }

}
==========================================

Обратите внимание, что название конструктора должно полностью совпадать с названием класса. В остальном, конструктор ничем не отличается от методов C# о которых мы уже говорили. В нашем конструкторе я использовал ключевое слово this, которое представляет ссылку на текущий экземпляр класса. Это ключевое слово может использоваться для различных нужд, но, конкретно в данном случае я использовал this потому что имена параметров у конструктора полностью совпадают с именами полей класса. Если бы я не использовал this, то компилятор не понял, что я хочу сделать (присвоить полю класса значение параметра метода) и предложил бы избавиться от лишнего присваивания.
После того как вы создадите свой конструктор конструктор по умолчанию перестанет использоваться и вы увидите в списке ошибок в Visual Studio следующую ошибку:

Ошибка CS7036 Отсутствует аргумент, соответствующий требуемому формальному параметру «width» из «Building.Building(double, double, double)».

Наш конструктор должен содержать три обязательных параметра и теперь создать объект класса мы можем, например, так:

==========================================
Building building = new Building(20, 20, 4);
==========================================

Как и в любом методе в C#, мы можем определить в конструкторе необязательные параметры. Например, так:

==========================================
public Building(double width, double length, double height = 3)
{
    this.width = width;
    this.length = length;
    this.height = height;
}
==========================================

И теперь два следующих объекта будут абсолютно идентичны:

==========================================
static void Main(string[] args)
{
    Building building = new Building(20, 20, 3);
    Building building2 = new Building(20, 20);
    Console.WriteLine($"Объем первого здания: {building.GetVolume()}");
    Console.WriteLine($"Объем второго здания: {building2.GetVolume()}");
}
==========================================

Вывод консоли:

Объем первого здания: 1200
Объем второго здания: 1200